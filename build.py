#!/usr/bin/python

def genVM():
    bytecodesStr = '''
RET CONST CALL 
ADD SUB MUL DIV MOD
PI E RND
UMIN POWER FACT
SQRT CBRT
EXP LN LOG10 LOG2
SIN COS TAN ASIN ACOS ATAN
SINH COSH TANH ASINH ACOSH ATANH
ABS FLOOR CEIL SIGN
MIN MAX GCD COMB PERM
LDX LDY LDZ
'''
    template = '''
// This file is automatically generated by the build.py script. Do not edit!
public class VM {

public static final byte
%(bytecodes)s;

public static final String[] opcodeName = {
%(names)s
};

}
'''

    bytecodes = bytecodesStr.split()
    str1 = ',\n'.join(['%s = %d' % (name, id) for (name, id) in zip(bytecodes, xrange(256))])
    str2 = ',\n'.join(['"%s"' % name for name in bytecodes])
    fo = open('src/VM.java', 'w')
    fo.write(template % dict(bytecodes=str1, names=str2))
    fo.close()

genVM()

import mebuild

spec = dict(
cldc    = '1.1',
midp    = '2.0',
name    = 'Javia Calculator',
icon    = 'a',
cls     = 'Calc',
version = '0.2.0',
vendor  = 'Mihai Preda',
infoUrl = 'http://calculator.javia.org/',
extralibs = [],
fileName  = 'calculator'
)

midlet = mebuild.Midlet(**spec)

midlet.build(mebuild.cmdLineOptions())
